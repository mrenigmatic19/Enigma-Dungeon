    using linear queue
    
    MyQueue() {
        
    }
    int a[1000];
    int f=0,r=0;
    void push(int x) {
        if(r==1000)
        cout<<"overflow"<<endl;
        else
        {
            a[r++]=x;
        }
    }
   
    int pop() {
        if(f==r||r==0&&f==0)
        return -1;
        else{
            int t=a[f];
            f++;
            return t;
        }

    }
    
    int peek() {
        return a[f];
    }
    
    bool empty() {
        if(f==r||r==0&&f==0)
        return true;
        return false;
    }
};
using circular queue
    MyQueue() {
        
    }
    int a[1000];
    int f=0,r=0;
    void push(int x) {
        if(r==1000)
        cout<<"overflow"<<endl;
        else
        {
            a[r]=x;
            r=(r+1)%1000;
        }
    }
   
    int pop() {
        if(f==r||r==0&&f==0)
        return -1;
        else{
            int t=a[f];
            f=(f+1)%1000;
            return t;
        }

    }
    
    int peek() {
        return a[f];
    }
    
    bool empty() {
        if(f==r||r==0&&f==0)
        return true;
        return false;
    }
};
dequeue
class MyCircularDeque {
public:
vector<int>q;
int size=0,cursize=0;
int f,r;
    MyCircularDeque(int k) {
        size=k;
        f=0,r=0;
        q.resize(k,-1);
    }
    
    bool insertFront(int value) {
        if(isFull())
        return false;
        else{
            cursize++;
            f=f==0?size-1:f-1;
            q[f]=value;
            return true;
        }
    }
    
    bool insertLast(int value) {
         if(isFull())
        return false;
        else{
            cursize++;
            q[r]=value;
            r=(r+1)%size;
            
            return true;
        }
    }
    
    bool deleteFront() {
        if(isEmpty())
        return false;
        else{
            cursize--;
            f = (f + 1) % size;
            return true;
        }
    }
    
    bool deleteLast() {
        if(isEmpty())
        return false;
        else{
            cursize--;
            r=(r==0)?size-1:r-1;
            return true;
        }
    }
    
    int getFront() {
        if(isEmpty())
        return -1;
        return q[f];
    }
    
    int getRear() {
        if(isEmpty())
        return -1;
        return q[r==0?size-1:r-1];
    }
    
    bool isEmpty() {
        if(cursize==0)
        return true;
        return false;
    }
    
    bool isFull() {
        if(cursize==size)
        return true;
        return false;
    }
};
